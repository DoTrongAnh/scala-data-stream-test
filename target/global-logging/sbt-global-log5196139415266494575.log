[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\anhtr\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\anhtr\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.6 (Oracle Corporation Java 14)
[debug]       Load.loadUnit: plugins took 223.3943ms
[debug]       Load.loadUnit: defsScala took 0.7571ms
[debug] [Loading] Scanning directory C:\Users\anhtr\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\anhtr\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 42.0211 ms
[debug]           Load.resolveProject(global-plugins) took 103.5328ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\anhtr\.sbt\1.0\plugins, plugins: List(<none>))) took 200.6772ms
[debug] [Loading] Done in C:\Users\anhtr\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 243.1539ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5964ms
[debug]     Load.loadUnit(file:/C:/Users/anhtr/.sbt/1.0/plugins/, ...) took 497.1593ms
[debug]   Load.apply: load took 1043.3883ms
[debug]   Load.apply: resolveProjects took 9.8311ms
[debug]   Load.apply: finalTransforms took 144.2971ms
[debug]   Load.apply: config.delegates took 21.1153ms
[debug]   Load.apply: Def.make(settings)... took 13421.4455ms
[debug]   Load.apply: structureIndex took 570.0366ms
[debug]   Load.apply: mkStreams took 6.4782ms
[info] loading global plugins from C:\Users\anhtr\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 24587.8746ms
[debug]           Load.loadUnit: plugins took 145.0364ms
[debug]           Load.loadUnit: defsScala took 0.0407ms
[debug] [Loading] Scanning directory F:\WriteSQLTest\project
[debug]             Load.loadUnit: mkEval took 21.4996ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in F:\WriteSQLTest\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 6.5525 ms
[info] loading settings for project writesqltest-build from plugins.sbt,idea2.sbt ...
[debug]               Load.resolveProject(writesqltest-build) took 7.6997ms
[debug]             Load.loadTransitive: finalizeProject(Project(id writesqltest-build, base: F:\WriteSQLTest\project, plugins: List(<none>))) took 15.7624ms
[debug] [Loading] Done in F:\WriteSQLTest\project, returning: (writesqltest-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 500.6914ms
[debug]           Load.loadUnit: cleanEvalClasses took 41.744ms
[debug]         Load.loadUnit(file:/F:/WriteSQLTest/project/, ...) took 692.4802ms
[debug]       Load.apply: load took 699.361ms
[debug]       Load.apply: resolveProjects took 0.2321ms
[debug]       Load.apply: finalTransforms took 39.9562ms
[debug]       Load.apply: config.delegates took 0.988ms
[debug]       Load.apply: Def.make(settings)... took 252.8391ms
[debug]       Load.apply: structureIndex took 80.3724ms
[debug]       Load.apply: mkStreams took 0.004ms
[info] loading project definition from F:\WriteSQLTest\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2915.5432ms
[debug]     Load.loadUnit: defsScala took 0.0079ms
[debug] [Loading] Scanning directory F:\WriteSQLTest
[debug]       Load.loadUnit: mkEval took 1.0031ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in F:\WriteSQLTest, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbtide.ConfigPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 16.2231 ms
[info] loading settings for project writesqltest from build.sbt ...
[debug]         Load.resolveProject(writesqltest) took 132.5897ms
[debug]       Load.loadTransitive: finalizeProject(Project(id writesqltest, base: F:\WriteSQLTest, plugins: List(<none>))) took 152.2183ms
[debug] [Loading] Done in F:\WriteSQLTest, returning: (writesqltest)
[debug]     Load.loadUnit: loadedProjectsRaw took 6511.3098ms
[debug]     Load.loadUnit: cleanEvalClasses took 112.4765ms
[debug]   Load.loadUnit(file:/F:/WriteSQLTest/, ...) took 9540.7699ms
[debug] Load.apply: load took 9548.2315ms
[debug] Load.apply: resolveProjects took 0.2169ms
[debug] Load.apply: finalTransforms took 90.5287ms
[debug] Load.apply: config.delegates took 2.2522ms
[debug] Load.apply: Def.make(settings)... took 379.9508ms
[debug] Load.apply: structureIndex took 174.4174ms
[debug] Load.apply: mkStreams took 0.0038ms
[info] set current project to WriteSQLTest (in build file:/F:/WriteSQLTest/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * writesqltest / idePackagePrefix
[warn]   +- F:\WriteSQLTest\build.sbt:7
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 65430 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 65430, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to WriteSQLTest (in build file:/F:/WriteSQLTest/)
[debug] > Exec(idea-shell, None, None)
